import cv2 as cv
import numpy as np
import cv2
import imutils
from skimage.metrics import structural_similarity

img1C = cv.imread("G:/tmp/project ai/2.2/c2.png")
img2C = cv.imread("G:/tmp/project ai/2.2/c1.png")

img1 = cv.imread("G:/tmp/project ai/2.2/c2.png", cv.IMREAD_GRAYSCALE)
img2 = cv.imread("G:/tmp/project ai/2.2/c1.png", cv.IMREAD_GRAYSCALE)
if img1 is None or img2 is None:
    print('Could not open or find the images!')
    exit(0)
# -- Step 1: Detect the keypoints using SURF Detector, compute the descriptors

detector = cv.xfeatures2d.SIFT_create()
keypoints1, descriptors1 = detector.detectAndCompute(img1, None)
keypoints2, descriptors2 = detector.detectAndCompute(img2, None)
# -- Step 2: Matching descriptor vectors with a FLANN based matcher
# Since SURF is a floating-point descriptor NORM_L2 is used
matcher = cv.DescriptorMatcher_create(cv.DESCRIPTOR_MATCHER_BRUTEFORCE)
knn_matches = matcher.knnMatch(descriptors1, descriptors2, 2)
# -- Filter matches using the Lowe's ratio test
ratio_thresh = 0.8
good_matches = []
for m, n in knn_matches:
    if m.distance < ratio_thresh * n.distance:
        good_matches.append(m)
# -- Draw matches
img_matches = np.empty((max(img1.shape[0], img2.shape[0]), img1.shape[1] + img2.shape[1], 3), dtype=np.uint8)
cv.drawMatches(img1, keypoints1, img2, keypoints2, good_matches, img_matches,
               flags=cv.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
# -- Show detected matches
cv.imshow('Good Matches', img_matches)
# cv.waitKey()

list_kp1 = [keypoints1[mat.queryIdx].pt for mat in good_matches]
list_kp2 = [keypoints2[mat.trainIdx].pt for mat in good_matches]
maxX = maxY = 0
(minX, minY) = list_kp2[0]
for (i, j) in list_kp2:
    if (i > maxX):
        maxX = i
    if (i < minX):
        minX = i
    if (j > maxY):
        maxY = j
    if (j < minY):
        minY = j

minX = int(minX)
minY = int(minY)
maxX = int(maxX)
maxY = int(maxY)
print(minX, minY, maxX, maxY)
factor = img2.shape[1] - maxX

crop_img2 = img2C[minY-factor:maxY+factor, minX-factor:maxX+factor]
cv.imshow("cropped2", crop_img2)

maxX = maxY = 0
(minX, minY) = list_kp2[0]
for (i, j) in list_kp1:
    if (i > maxX):
        maxX = i
    if (i < minX):
        minX = i
    if (j > maxY):
        maxY = j
    if (j < minY):
        minY = j

minX = int(minX)
minY = int(minY)
maxX = int(maxX)
maxY = int(maxY)
print(minX, minY, maxX, maxY)

crop_img = img1C[minY-factor:maxY+factor, minX-factor:maxX+factor]
crop_img = cv.resize(crop_img, (crop_img2.shape[1], crop_img2.shape[0]))
cv.imshow("cropped1", crop_img)
cv.waitKey(0)
cv.imwrite("G:/tmp/project ai/2.2/cc1.png", crop_img)
cv.imwrite("G:/tmp/project ai/2.2/cc2.png", crop_img2)
